import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/utils/supabase/server';

// Function to generate a unique share token
function generateShareToken(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 16; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// POST /api/user-recommendations - Create or update a user recommendation (supports anonymous users)
export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient();
    
    // Get the current user (can be null for anonymous users)
    const { data: { user } } = await supabase.auth.getUser();
    
    const body = await request.json();
    const { 
      productId, 
      recommendationData, 
      userProfile, 
      query,
      isShared = false
    } = body;
    
    if (!productId || !recommendationData || !query) {
      return NextResponse.json(
        { error: 'Missing required fields: productId, recommendationData, query' },
        { status: 400 }
      );
    }
    
    console.log('üîç DEBUG: Creating recommendation for user:', user?.id || 'anonymous');
    
    // For anonymous users, we don't check for existing recommendations
    // For authenticated users, check if recommendation already exists
    let existingRecommendation = null;
    if (user) {
      const { data } = await supabase
        .from('user_recommendations')
        .select('id, share_token, is_shared')
        .eq('user_id', user.id)
        .eq('product_id', productId)
        .eq('query', query)
        .single();
      existingRecommendation = data;
    }
    
    let shareToken = null;
    let recommendationId = null;
    
    if (existingRecommendation) {
      // Update existing recommendation (only for authenticated users)
      const updateData: Record<string, unknown> = {
        recommendation_data: recommendationData,
        user_profile: userProfile || null,
        updated_at: new Date().toISOString()
      };
      
      if (isShared && !existingRecommendation.is_shared) {
        // Make it shared
        updateData.is_shared = true;
        updateData.expires_at = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
        // share_token will be auto-generated by trigger
      }
      
      const { data: updatedRecommendation, error: updateError } = await supabase
        .from('user_recommendations')
        .update(updateData)
        .eq('id', existingRecommendation.id)
        .select('share_token, id')
        .single();
      
      if (updateError) {
        console.error('‚ùå Error updating recommendation:', updateError);
        return NextResponse.json(
          { error: 'Failed to update recommendation' },
          { status: 500 }
        );
      }
      
      shareToken = updatedRecommendation.share_token;
      recommendationId = updatedRecommendation.id;
    } else {
      // Create new recommendation (works for both authenticated and anonymous users)
      const insertData: Record<string, unknown> = {
        user_id: user?.id || null, // Can be null for anonymous users
        product_id: parseInt(productId),
        query: query,
        recommendation_data: recommendationData,
        user_profile: userProfile || null,
        is_shared: isShared
      };
      
      if (isShared) {
        insertData.expires_at = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
        // Generate share token manually
        insertData.share_token = generateShareToken();
      }
      
      console.log('üîç DEBUG: Inserting recommendation with data:', {
        userId: user?.id || 'anonymous',
        productId: parseInt(productId),
        isShared,
        hasUserProfile: !!userProfile
      });
      
      const { data: newRecommendation, error: insertError } = await supabase
        .from('user_recommendations')
        .insert(insertData)
        .select('share_token, id')
        .single();
      
      if (insertError) {
        console.error('‚ùå Error creating recommendation:', insertError);
        console.error('‚ùå Error details:', {
          message: insertError.message,
          details: insertError.details,
          hint: insertError.hint,
          code: insertError.code
        });
        return NextResponse.json(
          { error: 'Failed to create recommendation' },
          { status: 500 }
        );
      }
      
      shareToken = newRecommendation.share_token;
      recommendationId = newRecommendation.id;
    }
    
    console.log('‚úÖ Recommendation saved successfully:', {
      id: recommendationId,
      shareToken,
      userId: user?.id || 'anonymous'
    });
    
    return NextResponse.json({
      success: true,
      recommendationId,
      shareToken: shareToken,
      shareUrl: shareToken ? `${process.env.NEXT_PUBLIC_BASE_URL || (process.env.NODE_ENV === 'production' ? 'https://pointfour.in' : 'http://localhost:3000')}/shared/${shareToken}` : null
    });
    
  } catch (error) {
    console.error('‚ùå Exception in user recommendations POST:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// GET /api/user-recommendations - Get user's recommendation history
export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient();
    
    // Get the current user
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '10');
    const offset = parseInt(searchParams.get('offset') || '0');
    
    // Fetch all user recommendations with product details, ordered by most recent
    const { data: recommendations, error } = await supabase
      .from('user_recommendations')
      .select(`
        id,
        product_id,
        query,
        created_at,
        recommendation_data,
        product:products!user_recommendations_product_id_fkey (
          id,
          name,
          image_url,
          brand:brands!products_brand_id_fkey (
            name,
            slug
          )
        )
      `)
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error fetching user recommendations:', error);
      return NextResponse.json(
        { error: 'Failed to fetch recommendations' },
        { status: 500 }
      );
    }
    
    // Deduplicate by product_id, keeping most recent per product
    const seenProducts = new Set<number>();
    const uniqueRecommendations = (recommendations || []).filter(rec => {
      if (seenProducts.has(rec.product_id)) {
        return false;
      }
      seenProducts.add(rec.product_id);
      return true;
    });
    
    // Apply pagination
    const paginatedRecommendations = uniqueRecommendations.slice(offset, offset + limit);
    
    return NextResponse.json({
      success: true,
      recommendations: paginatedRecommendations,
      total: uniqueRecommendations.length,
      hasMore: offset + limit < uniqueRecommendations.length
    });
    
  } catch (error) {
    console.error('Error in user recommendations GET:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
