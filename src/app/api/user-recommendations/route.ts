import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/utils/supabase/server';

// Function to generate a unique share token
function generateShareToken(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 16; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// POST /api/user-recommendations - Create or update a user recommendation (supports anonymous users)
export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient();
    
    // Get the current user (can be null for anonymous users)
    const { data: { user } } = await supabase.auth.getUser();
    
    const body = await request.json();
    const { 
      productId, 
      recommendationData, 
      userProfile, 
      query,
      isShared = false
    } = body;
    
    if (!productId || !recommendationData || !query) {
      return NextResponse.json(
        { error: 'Missing required fields: productId, recommendationData, query' },
        { status: 400 }
      );
    }
    
    console.log('🔍 DEBUG: Creating recommendation for user:', user?.id || 'anonymous');
    
    // For anonymous users, we don't check for existing recommendations
    // For authenticated users, check if recommendation already exists
    let existingRecommendation = null;
    if (user) {
      const { data } = await supabase
        .from('user_recommendations')
        .select('id, share_token, is_shared')
        .eq('user_id', user.id)
        .eq('product_id', productId)
        .eq('query', query)
        .single();
      existingRecommendation = data;
    }
    
    let shareToken = null;
    let recommendationId = null;
    
    if (existingRecommendation) {
      // Update existing recommendation (only for authenticated users)
      const updateData: any = {
        recommendation_data: recommendationData,
        user_profile: userProfile || null,
        updated_at: new Date().toISOString()
      };
      
      if (isShared && !existingRecommendation.is_shared) {
        // Make it shared
        updateData.is_shared = true;
        updateData.expires_at = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
        // share_token will be auto-generated by trigger
      }
      
      const { data: updatedRecommendation, error: updateError } = await supabase
        .from('user_recommendations')
        .update(updateData)
        .eq('id', existingRecommendation.id)
        .select('share_token, id')
        .single();
      
      if (updateError) {
        console.error('❌ Error updating recommendation:', updateError);
        return NextResponse.json(
          { error: 'Failed to update recommendation' },
          { status: 500 }
        );
      }
      
      shareToken = updatedRecommendation.share_token;
      recommendationId = updatedRecommendation.id;
    } else {
      // Create new recommendation (works for both authenticated and anonymous users)
      const insertData: any = {
        user_id: user?.id || null, // Can be null for anonymous users
        product_id: parseInt(productId),
        query: query,
        recommendation_data: recommendationData,
        user_profile: userProfile || null,
        is_shared: isShared
      };
      
      if (isShared) {
        insertData.expires_at = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
        // Generate share token manually
        insertData.share_token = generateShareToken();
      }
      
      console.log('🔍 DEBUG: Inserting recommendation with data:', {
        userId: user?.id || 'anonymous',
        productId: parseInt(productId),
        isShared,
        hasUserProfile: !!userProfile
      });
      
      const { data: newRecommendation, error: insertError } = await supabase
        .from('user_recommendations')
        .insert(insertData)
        .select('share_token, id')
        .single();
      
      if (insertError) {
        console.error('❌ Error creating recommendation:', insertError);
        console.error('❌ Error details:', {
          message: insertError.message,
          details: insertError.details,
          hint: insertError.hint,
          code: insertError.code
        });
        return NextResponse.json(
          { error: 'Failed to create recommendation' },
          { status: 500 }
        );
      }
      
      shareToken = newRecommendation.share_token;
      recommendationId = newRecommendation.id;
    }
    
    console.log('✅ Recommendation saved successfully:', {
      id: recommendationId,
      shareToken,
      userId: user?.id || 'anonymous'
    });
    
    return NextResponse.json({
      success: true,
      recommendationId,
      shareToken: shareToken,
      shareUrl: shareToken ? `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/shared/${shareToken}` : null
    });
    
  } catch (error) {
    console.error('❌ Exception in user recommendations POST:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// GET /api/user-recommendations/[token] - Get a shared recommendation by token
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ token: string }> }
) {
  try {
    const { token } = await params;
    
    if (!token) {
      return NextResponse.json(
        { error: 'Share token is required' },
        { status: 400 }
      );
    }
    
    const supabase = await createClient();
    
    // Get the shared recommendation
    const { data: sharedRecommendation, error } = await supabase
      .from('user_recommendations')
      .select(`
        *,
        product:products!user_recommendations_product_id_fkey (
          id,
          name,
          url,
          description,
          image_url,
          price,
          currency,
          brand:brands!products_brand_id_fkey (
            id,
            slug,
            name,
            logo_url,
            description,
            url
          )
        )
      `)
      .eq('share_token', token)
      .eq('is_shared', true)
      .gt('expires_at', new Date().toISOString())
      .single();
    
    if (error || !sharedRecommendation) {
      return NextResponse.json(
        { error: 'Shared recommendation not found or expired' },
        { status: 404 }
      );
    }
    
    // Increment view count
    await supabase.rpc('increment_shared_recommendation_view', {
      share_token_param: token
    });
    
    return NextResponse.json({
      success: true,
      data: {
        recommendation: sharedRecommendation.recommendation_data,
        product: sharedRecommendation.product,
        userProfile: sharedRecommendation.user_profile,
        productQuery: sharedRecommendation.query,
        createdAt: sharedRecommendation.created_at,
        viewCount: sharedRecommendation.view_count + 1, // Include the incremented count
        expiresAt: sharedRecommendation.expires_at
      }
    });
    
  } catch (error) {
    console.error('Error in user recommendations GET:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
